typedef UpperTerm = string

typedef Term = Term_Upper{upper: UpperTerm}
    | Term_Integer{integer: s64}

typedef Variable = string

typedef Expression = ExpressionTerm{term: Term}
    | ExpressionVarible{variable: Variable}

typedef Enum = Enum {
    name: UpperTerm,
    terms: Vec<UpperTerm>
}

typedef Sort = Sort {
    name: UpperTerm,
    attributes: Vec<FunctionDeclaration>
}

typedef FunctionDeclaration = FunctionDeclaration {
    params: Option<Vec<UpperTerm>>,
    ret: UpperTerm
}

typedef Fluents = Fluents {
    basic: Vec<FunctionDeclaration>,
    defined: Vec<FunctionDeclaration>
}

typedef FunctionAssignment = FunctionAssignment {
    name : UpperTerm,
    arguments : Vec<Expression>,
    value : Option<Expression>
}

typedef Axiom = Static_Assignment {
    name: UpperTerm,
    value: Term
}
| Fact {
    fact: FunctionAssignment
}

| Rule {
    head: FunctionAssignment,
    body: Vec<RuleClause>
}

typedef RuleClause = ClauseFunctionAssignment {function_assingment: FunctionAssignment}
| ClauseDDLogExpression {ddlog_expression: DDLogExpression}

typedef DDLogExpression = string

typedef Module = Module{
    enums: Vec<Enum>,
    sorts: Vec<Sort>,
    statics: Vec<FunctionDeclaration>,
    fluents: Fluents,
    axioms: Vec<Axiom>
}
