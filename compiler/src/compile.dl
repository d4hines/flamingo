///////////// ALM AST //////////////
typedef UpperTerm = string

typedef Term = Term_Upper{upper: UpperTerm}
    | Term_Integer{integer: s64}

typedef Variable = string

typedef Expression = ExpressionTerm{term: Term}
    | ExpressionVarible{variable: Variable}

typedef Enum = Enum {
    name: UpperTerm,
    terms: Vec<UpperTerm>
}

typedef Sort = Sort {
    name: UpperTerm,
    attributes: Vec<FunctionDeclaration>
}

typedef FunctionDeclaration = FunctionDeclaration {
    params: Option<Vec<UpperTerm>>,
    ret: UpperTerm
}

typedef Fluents = Fluents {
    basic: Vec<FunctionDeclaration>,
    defined: Vec<FunctionDeclaration>
}

typedef FunctionAssignment = FunctionAssignment {
    name : UpperTerm,
    arguments : Vec<Expression>,
    value : Option<Expression>,
    negated : bool
}

typedef Axiom = Static_Assignment {
    name: UpperTerm,
    value: Term
}
| Fact {
    fact: FunctionAssignment
}

| Rule {
    head: FunctionAssignment,
    body: Vec<RuleClause>
}

typedef RuleClause = ClauseFunctionAssignment {function_assingment: FunctionAssignment}
| ClauseDDLogExpression {raw_ddlog: Raw_DDLog}

typedef Raw_DDLog = string

typedef Module = Module{
    enums: Vec<Enum>,
    sorts: Vec<Sort>,
    statics: Vec<FunctionDeclaration>,
    fluents: Fluents,
    axioms: Vec<Axiom>
}

///////////// DDLog AST ////////////
typedef DD_Nodes = Vec<UpperTerm>
typedef DD_Attribute_Wrapers = Vec<UpperTerm>
typedef DD_Attribute_Relations = Vec<UpperTerm>
typedef DD_Links = (UpperTerm, UpperTerm)
typedef DD_Static_Declarations = Vec<FunctionDeclaration>
typedef DD_Fluent_Declarations = Vec<FunctionDeclaration>
typedef DD_Defined_Fluent_Declarations = Vec<FunctionDeclaration>
typedef DD_Output_Values = Vec<UpperTerm>
typedef DD_Output_Rules = Vec<UpperTerm>
typedef DD_Static_Values = Vec<(UpperTerm, Term)>

typedef DD_FluentKind = Basic | Defined

typedef DD_Function_Assignment = DD_Function_Assignment {
    kind: DD_FluentKind,
    body: FunctionAssignment
}

